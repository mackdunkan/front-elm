module Translations exposing (Translations, decoder, parse)

{-| 


# !!! DO NOT EDIT THIS FILE !!!

This file was generated with:
<https://github.com/layflags/elm-translations>


-}

import Json.Decode exposing (Decoder, Error, Value, map, string, succeed)
import Json.Decode.Pipeline exposing (required)


decoder : Decoder Translations
decoder =
    decodeTranslations


parse : Value -> Result Error Translations
parse =
    Json.Decode.decodeValue decodeTranslations


type alias Translations =
    { welcome : { name : String } -> String, home : Translations_home }


decodeTranslations : Decoder Translations
decodeTranslations =
    let
        substitute_welcome content args =
            content |> String.replace "{{name}}" args.name
    in
    succeed Translations
        |> required "welcome" (map substitute_welcome string)
        |> required "home" decodeTranslations_home


type alias Translations_home =
    { intro : String }


decodeTranslations_home : Decoder Translations_home
decodeTranslations_home =
    succeed Translations_home |> required "intro" string
